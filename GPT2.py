# -*- coding: utf-8 -*-
"""training_gpt2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ngITCQQIsoLb8zqYGyNaH_49zlwFA6O9
"""
import torch
import torch.nn as nn
from torch.nn import functional as F

batch_size = 32 # how many independent sequences are we processing in parallel?
block_size = 8 # what is maximum context length for predictions?
max_iters = 5000
eval_interval = 300
learning_rate = 1e-3
device = 'cpu'
eval_iters = 200
n_embd = 32
n_head = 8
n_layer = 6
dropout = 0.2

torch.manual_seed(1337)

# read input file
with open('input.txt', 'r', encoding='utf-8') as f:
  text = f.read()

print("length of dataset: " + str(len(text)))

# get set of unique characters that occur in text to get list of possible chars
chars = sorted(list(set(text)))
vocab_size = len(chars)
print(''.join(chars))
print(vocab_size)

"""Tokenizer. This is a very simple one below. Google uses **SentencePiece**. GPT uses tiktoken"""

# create a mapping from characters to integers: example tokenizer
stoi = { ch:i for i,ch in enumerate(chars) }
itos = { i:ch for i,ch in enumerate(chars) }
encode = lambda s: [stoi[c] for c in s] # take string, output int vector
decode = lambda l: ''.join([itos[i] for i in l]) # take int vector, ouput string

print(encode("hello world"))
print(decode(encode("hello world")))

# encode the entire text dataset and store it in a torch.tensor
import torch
data = torch.tensor(encode(text), dtype=torch.long)
print(data.shape, data.dtype)
print(data[:1000])

# split data into train and validation
n = int(len(data)*0.9)
train_data = data[:n]
val_data = data[n:]

# set up context window
train_data[:block_size+1]

x = train_data[:block_size]
y = train_data[1:block_size+1]
for t in range(block_size):
  context = x[:t+1]
  target = y[t]
  print(f"when input is {context} the target: {target}")

def get_batch(split):
  # generate batches
  data = train_data if split == "train" else val_data
  ix = torch.randint(0, len(data) - batch_size, (batch_size,))
  x = torch.stack([data[i: i+block_size] for i in ix])
  y = torch.stack([data[i+1:i+block_size+1] for i in ix])
  return x, y

@torch.no_grad()
def estimate_loss():
  out = {}
  model.eval()
  for split in ['train', 'val']:
    losses = torch.zeros(eval_iters)
    for k in range(eval_iters):
      X, Y = get_batch(split)
      logits, loss = model(X, Y)
      losses[k] = loss.item()
    out[split] = losses.mean()
  model.train()
  return out

xb, yb = get_batch("train")
print('inputs:')
print(xb.shape)
print(xb)
print('targets:')
print(yb.shape)
print(yb)

print('-'*50)

for b in range(batch_size):
  for t in range(block_size):
    context = xb[b, :t+1]
    target = yb[b, t]
    print(f"when input is {context.tolist()} the target: {target}")

print(xb) # input to transformer

import torch
import torch.nn as nn
from torch.nn import functional as F

class Head(nn.Module):
  """ one head of self-attention """
  
  def __init__(self, head_size):
    super().__init__()
    self.key = nn.Linear(n_embd, head_size, bias=False)
    self.value = nn.Linear(n_embd, head_size, bias=False)
    self.query = nn.Linear(n_embd, head_size, bias=False)
    self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))
    
    self.dropout = nn.Dropout(dropout)
    
  def forward(self, x):
    B,T,C = x.shape
    k = self.key(x) # (B,T,head_size)
    q = self.query(x) # (B,T,head_size)
    
    # compute attention scores
    wei = q @ k.transpose(-2, -1) * C**-0.5 # (B,T,T)
    wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf')) # (B,T,T)
    wei = F.softmax(wei, dim=1)
    wei = self.dropout(wei)
    # do weighted aggregation of values
    v = self.value(x) # (B,T,head_size)
    out = wei @ v # (B,T,head_size)
    return out
  
class MultiHeadAttention(nn.Module):
  """ multiple heads of self-attention in parallel """
  
  def __init__(self, num_heads, head_size):
    super().__init__()
    self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
    self.proj = nn.Linear(n_embd, n_embd)
    self.dropout = nn.Dropout(dropout)
    
  def forward(self, x):
    out = torch.cat([h(x) for h in self.heads], dim=-1)
    out = self.dropout(self.proj(out))
    return out

class FeedForward(nn.Module):
  """ a simple linear layer followed by non-linearity """
  
  def __init__(self, n_embd):
    super().__init__()
    self.net = nn.Sequential(
      nn.Linear(n_embd, n_embd * 4),
      nn.ReLU(),
      nn.Linear(n_embd * 4, n_embd),
      nn.Dropout(dropout),
    )
    
    
  def forward(self, x):
    return self.net(x)
  
class Block(nn.Module):
  """ Transformer block: communication followed by computation """
  
  def __init__(self, n_embd, n_head):
    super().__init__()
    head_size = n_embd // n_head
    self.sa = MultiHeadAttention(n_head, head_size)
    self.ffwd = FeedForward(n_embd)
    self.ln1 = nn.LayerNorm(n_embd)
    self.ln2 = nn.LayerNorm(n_embd)
    
  def forward(self, x):
    x = x + self.sa(self.ln1(x))
    x = x + self.ffwd(self.ln2(x))
    return x

class BigramLanguageModel(nn.Module):

  def __init__(self):
    super().__init__()
    # each token directly reads off the logits for the next token from a lookup table
    self.token_embedding_table = nn.Embedding(vocab_size, n_embd)
    self.position_embedding_table = nn.Embedding(block_size, n_embd)
    self.blocks = nn.Sequential(*[Block(n_embd, n_head) for _ in range(n_layer)]) 
    self.ln_f = nn.LayerNorm(n_embd)   
    self.lm_head = nn.Linear(n_embd, vocab_size)

  def forward(self, idx, targets=None):
    B,T = idx.shape

    # idx and targets are both (B, T) tensor of integers
    tok_emb = self.token_embedding_table(idx) # (B,T,C)
    pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)
    x = tok_emb + pos_emb
    x = self.blocks(x) # (B,T,C)
    x = self.ln_f(x)
    logits = self.lm_head(x) # (B,T,vocab_size)

    if targets is None:
      loss = None
    else:
      B, T, C = logits.shape
      logits = logits.view(B*T, C)
      targets = targets.view(B*T)
      loss = F.cross_entropy(logits, targets)

    return logits, loss

  def generate(self, idx, max_new_tokens):
    # idx is (B, T) array of indices in the current context
    for _ in range(max_new_tokens):
      # crop idx to the last block_size tokens
      idx_cond = idx[:, -block_size:]
      # get predictions
      logits, loss = self(idx_cond)
      # focus only on last time step
      logits = logits[:, -1, :] # becomes (B,C)
      # apply softmax to get probs
      probs = F.softmax(logits, dim=1)
      # sample from distribution
      idx_next = torch.multinomial(probs, num_samples=1) # (B,1)
      # append samples index to the running sequence
      idx = torch.cat((idx, idx_next), dim=1) # (B,T+1)
    return idx

model = BigramLanguageModel()
m = model.to(device)

"""usually lr of 3e-4 for general networks"""

# create PyTorch optimizer
optimizer = torch.optim.AdamW(m.parameters(), lr=learning_rate)

for iter in range(max_iters):
  
  # every once in a while evaluate the loss on train and val sets
  if iter % eval_interval == 0:
    losses = estimate_loss()
    print(f"Step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

  # sample batch of data
  xb, yb = get_batch('train')

  # evaluate loss
  logits, loss = m(xb, yb)
  optimizer.zero_grad(set_to_none=True)
  loss.backward()
  optimizer.step()

# generate from the model
context = torch.zeros((1,1), dtype=torch.long, device=device)
print(decode(m.generate(context, max_new_tokens=500)[0].tolist()))